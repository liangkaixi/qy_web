---
description: 
globs: 
alwaysApply: true
---
# 网站 & 微信小程序开发总纲要（规则/指引）

## 1. 极简但清晰的首页设计
- 首页只保留核心功能，如「立即预约」「课程报名」「活动报名」等，入口直观、按钮突出。
- 所有一级导航/行动按钮必须一眼可见，避免隐藏在二级菜单。
- 首页顶部可有品牌LOGO/口号，底部为主导航栏。

## 2. 操作路径极短、极顺畅
- 任何核心操作（如预约、报名、下单）3步内完成。
- 关键流程（如新用户注册、首次预约）需有引导提示（如进度条、步骤说明、气泡指引）。
- 表单字段极简，能自动填充的绝不手填，能一步完成的绝不多步。

## 3. 视觉风格统一、识别度高
- 明确品牌主色、辅助色、字体、按钮样式、图标风格，全站/全小程序统一。
- 页面布局干净，留白充足，信息分层清晰。
- 组件（如按钮、卡片、弹窗）风格一致，复用率高。

## 4. 内容真实可信，有"人味"
- 首页/核心页面展示真实用户评论、打卡动态、成果对比等UGC内容。
- 支持用户上传图片/评论/点赞/分享，打造社区氛围。
- 重要内容配有用户头像、昵称、时间等信息，增强"人味"。

## 5. 智能推荐 or 个性化服务
- 根据用户资料/行为，自动推荐课程、活动、场地等。
- 支持问卷/简易测试，生成个性化推荐。
- 推荐算法可先用规则引擎，后续可升级为AI/大数据驱动。

## 6. 活动营销体系完善
- 支持常规活动、节假日活动、裂变推荐、积分兑换、签到打卡等多种营销玩法。
- 所有活动均可一键分享至微信/朋友圈，支持生成带参数二维码。
- 用户可通过集赞、邀请好友、完成任务等方式获得奖励。

## 7. 用户生命周期运营机制
- 新用户注册自动发放福利券/体验券，首页弹窗或Banner提示。
- 老用户定期推送续费、转介绍、升级等运营活动。
- 流失用户定期短信/微信唤回，推送专属折扣或福利。

## 8. 数据反馈 + 留资能力
- 所有关键行为（点击、访问、转化、分享、报名、预约）均有埋点，便于数据分析。
- 重要转化节点（如预约、报名、活动参与）需引导用户绑定手机号/微信授权/填写表单，便于后续触达。
- 后台可导出用户数据、行为数据、转化数据，支持数据可视化。

---

### 技术与实现建议
- 前端：Vue3 + Vite（Web），微信小程序原生/uniapp（小程序端），组件风格统一。
- 后端：Supabase/PostgreSQL，统一API接口，支持用户、预约、活动、UGC、营销等全业务。
- UI/UX：Figma/Sketch 设计全局样式与组件库，开发严格按设计稿实现。
- 埋点与数据：前端全埋点，后端日志，支持数据分析与可视化。
- 运营与营销：与微信生态深度集成，支持模板消息、订阅消息、二维码分享等。

---

### 规则落地建议
1. 每个页面/模块开发前，先对照本纲要自查设计与交互是否符合要求。
2. 所有新功能/页面，必须有"极简路径"与"品牌统一"自测。
3. 每次迭代后，定期回顾产品是否有违背上述原则的地方，及时优化。
4. 团队成员 onboarding 时，务必学习本规则，确保开发风格和体验高度一致。

---

> 如需针对具体页面（如首页、预约页、活动页、个人中心等）制定更细致的UI/交互/数据/埋点/接口规范，可在本纲要基础上细化补充。
> 如需落地到代码层面（如目录结构、组件命名、接口设计、埋点方案等），可在本规则基础上补充详细开发规范和代码模板。

1. UI/UX 风格（Web & 微信小程序通用）

🌈 主题设计：

采用蓝绿渐变背景，体现运动活力。

统一风格：现代、活力、简洁。

所有主要模块采用大圆角 + 适度阴影，增强视觉层次感。

📱 响应式设计：

移动端：单列或双列布局，顶部留白、内容居中、底部避免空白。

网页端：内容宽度适中、排版舒展、视觉分明。

内容主要居中展示，避免元素漂浮或分散。

🔘 交互元素：

按钮有明显 hover/active 效果，禁用状态对比强烈。

输入框采用圆角 + 高亮边框，聚焦时边框高亮。

图片自适应裁剪，保持比例，避免拉伸或压缩。

2. 代码结构与注释规范

📁 目录结构：

页面（pages/）、组件（components/）、样式（styles/）、工具（utils/）清晰分离。

通用组件（如按钮、弹窗、表单）应复用，禁止冗余开发。

✍ 注释规范：

采用 JSDoc3 风格注释函数与逻辑块。

重点注重"为什么"和"怎么做"，避免无效注释。

📓 日志记录：

使用统一日志模块 utils/logger.js（基于 Winston）。

接口请求、关键操作、异常等需记录 info/warn/error 日志。

3. 用户交互体验要求

所有表单需前端校验，错误提示醒目友好。

所有操作需配合 loading 状态。

操作成功/失败用 toast 或弹窗提示。

页面无数据或异常状态必须有提示或占位图。

表单提交后按钮立即禁用，避免重复提交。

4. 响应式适配要求

所有布局优先使用 Flex 布局，适配不同屏幕。

必要时使用媒体查询做针对性调整。

字体大小、间距随屏幕调整，提升阅读与触控体验。

5. 代码质量控制

保持简洁高效，避免冗余逻辑和样式。

统一使用 ESLint + Prettier 规范代码风格。

所有接口调用统一封装在 utils/request.js，易于维护与调试。

状态管理优先使用组件/页面局部状态，全局状态需抽离管理（如 Pinia/Vuex）。

6. 资源与图像使用规范

所有图片资源统一放在 static/ 目录，命名清晰统一。

图标类资源优先使用 SVG，确保清晰与扩展性。

7. 其他约定

♿ 无障碍支持：

所有按钮、输入框需添加 aria-label 或辅助文本。

🔍 SEO 与分享：

页面应有合适标题与 meta 描述。

小程序页面需配置页面 title, desc, shareConfig 等，提升可发现性。

---

## 建议补充的内容（为后续开发和团队协作提供参考）

### 1. 代码层面开发规范
- **目录结构约定**：详细说明前端、后端、通用组件、静态资源、样式、工具等目录的组织方式和命名规范。
- **组件命名与复用**：约定组件命名风格（如大驼峰）、通用组件库建设、禁止重复造轮子。
- **接口设计规范**：约定 API 命名、RESTful 设计、错误码、分页、数据结构返回格式等。
- **状态管理建议**：说明全局与局部状态的管理方式（如 Pinia/Vuex/Context），以及何时抽离为全局。
- **前后端联调流程**：约定接口文档、Mock 数据、接口变更通知机制。
- **单元测试/集成测试要求**：约定测试覆盖率、测试用例编写、CI 流程等。

### 2. 设计与交互规范
- **UI 设计稿交付标准**：约定设计稿命名、标注、切图、交互说明等。
- **动效与过渡**：约定页面/组件的动效风格、过渡动画统一性。
- **无障碍与国际化**：说明无障碍支持的具体做法（如 aria-label）、多语言支持的技术方案。

### 3. 数据与埋点规范
- **埋点字段与事件命名规范**：约定埋点事件、属性命名、数据上报频率、异常兜底策略。
- **数据安全与隐私**：说明用户数据加密、脱敏、权限校验等要求。

### 4. 运营与内容管理
- **内容审核机制**：说明 UGC 内容的审核流程、敏感词过滤、违规处理。
- **活动配置与动态化**：约定活动配置的动态化、可视化后台管理建议。

### 5. 版本管理与协作流程
- **分支管理与代码评审**：约定 Git 分支命名、PR 流程、代码评审标准。
- **文档与知识库**：约定文档存放、更新频率、团队知识共享机制。