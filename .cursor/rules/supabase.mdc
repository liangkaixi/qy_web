---
description: 
globs: 
alwaysApply: true
---
### 创建的表如下
-- 场馆表
create table qy_venues (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  address text,
  description text,
  cover_image text,
  status text default 'available'
);

-- 场地类型表
create table qy_court_types (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  icon text
);

-- 场地表
create table qy_courts (
  id uuid primary key default gen_random_uuid(),
  venue_id uuid references qy_venues(id),
  type_id uuid references qy_court_types(id),
  name text not null,
  area text,
  image text,
  resource_key text,      -- 物理分区唯一标识（如 court2A、court2B）
  resource_group text,    -- 物理场地分组（如 court2）
  area_type text,         -- 'full'（全场）或 'part'（分场/羽毛球/气排球等）
  status text default 'available'
);

-- 场地图片表（可选）
create table qy_court_images (
  id uuid primary key default gen_random_uuid(),
  court_id uuid references qy_courts(id),
  url text not null,
  sort int default 0
);

-- 预约表
create table qy_court_reservations (
  id uuid primary key default gen_random_uuid(),
  court_id uuid references qy_courts(id),
  date date not null,
  start_time time not null,
  duration int not null,
  price numeric not null,
  phone text not null,
  status text default 'reserved',
  created_at timestamptz default now()
);
ALTER TABLE qy_court_reservations
ADD COLUMN visibility text NOT NULL DEFAULT 'public';
-- 后续可支持 'public'（公开）、'invite'（仅限邀请）、'private'（私密）等
-- 球队表（qy_teams）
Apply to Reservation....
create table qy_teams (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  type text not null, -- 'basketball' | 'volleyball' | 'badminton'
  logo text,          -- 队徽图片url
  description text,
  captain_id uuid references auth.users(id), -- 队长/创建者
  created_at timestamptz default now()
);
-- 球队成员表（qy_team_members）
Apply to Reservation....
create table qy_team_members (
  id uuid primary key default gen_random_uuid(),
  team_id uuid references qy_teams(id),
  user_id uuid references auth.users(id),
  nickname text,
  is_captain boolean default false,
  joined_at timestamptz default now()
);

--个人资料
create table qy_user_profiles (
  id uuid primary key references auth.users(id),
  name text,
  contact text,
  avatar text
);

-- 创建用户表
create table qy_users (
  id uuid primary key default gen_random_uuid(),
  openid text unique not null,               -- 微信唯一标识
  nickname text,                             -- 微信昵称
  avatar_url text,                           -- 微信头像
  gender int,                                -- 性别：0未知 1男 2女
  city text,
  province text,
  country text,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);
 -- 约赛报名表（qy_match_signups）
create table qy_match_signups (
  id uuid primary key default gen_random_uuid(),
  match_id uuid references qy_matches(id),
  user_id uuid references qy_users(id),         -- 单人拼队时用
  team_id uuid references qy_teams(id),         -- 队伍报名时用
  signup_type text not null,                    -- 'single'（单人拼队）| 'team'（队伍）
  status text default 'pending',                -- 报名状态
  created_at timestamptz default now()
);
--约赛主表（qy_matches）
create table qy_matches (
  id uuid primary key default gen_random_uuid(),
  sport_type text not null,         -- 运动类型
  group_type text,                  -- 分组/分区
  creator_id uuid references qy_users(id), -- 发起人
  match_time timestamptz not null,  -- 约赛时间
  venue_id uuid references qy_venues(id),  -- 场馆
  court_id uuid references qy_courts(id),  -- 场地
  status text default 'pending',    -- 状态
  created_at timestamptz default now()
);

--比赛结果表（qy_match_results）
create table qy_match_results (
  id uuid primary key default gen_random_uuid(),
  match_id uuid references qy_matches(id) unique,
  team_a_id uuid references qy_teams(id),
  team_b_id uuid references qy_teams(id),
  team_a_score int,
  team_b_score int,
  winner_team_id uuid references qy_teams(id),
  remark text,
  created_at timestamptz default now()
);

--球队评分表（qy_team_ratings）
create table qy_team_ratings (
  id uuid primary key default gen_random_uuid(),
  team_id uuid references qy_teams(id),
  match_id uuid references qy_matches(id),
  rater_id uuid references qy_users(id),      -- 评分人
  sportsmanship int,                          -- 体育精神
  skill int,                                  -- 技术
  teamwork int,                               -- 团队协作
  comment text,                               -- 评价内容
  created_at timestamptz default now(),
  unique(team_id, match_id, rater_id)
);
-- 队员点赞表（qy_team_member_likes）
create table qy_team_member_likes (
  id uuid primary key default gen_random_uuid(),
  team_id uuid references qy_teams(id),
  member_id uuid references qy_team_members(id),   -- 被点赞的队员
  user_id uuid references qy_users(id),            -- 点赞人
  created_at timestamptz default now(),
  unique(team_id, member_id, user_id)
);
1. 公告表（qy_announcements）
create table qy_announcements (
  id uuid primary key default gen_random_uuid(),
  text text not null,                -- 公告内容
  created_at timestamptz default now()
);
2. 推荐内容表（qy_recommend_items）
create table qy_recommend_items (
  id uuid primary key default gen_random_uuid(),
  title text not null,               -- 推荐标题
  description text,                  -- 推荐描述
  img text,                          -- 推荐图片URL
  link text,                         -- 跳转链接
  type text,                         -- 推荐类型（如 course/activity/court，可选）
  created_at timestamptz default now()
);
3. UGC动态表（qy_ugc_posts）
create table qy_ugc_posts (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references qy_users(id),  -- 关联用户表
  content text not null,                 -- 动态内容
  created_at timestamptz default now()
);
--2. 参与表（推荐新建）
CREATE TABLE qy_reservation_participants (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  reservation_id uuid REFERENCES qy_court_reservations(id),
  user_id uuid REFERENCES qy_users(id),
  phone text,
  joined_at timestamptz DEFAULT now(),
  UNIQUE(reservation_id, user_id)
);

-- RLS
create policy "Allow insert own reservation"
  on qy_court_reservations
  for insert
  with check (user_id = auth.uid());

